{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "\u0011[__4.__0]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__4.__1]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "2",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "1",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXq-Yf4f1a-f0Z-Zf2',float('-1.000000'),float('3.000000'),float('0.000000'),float('1.000000'),float('5.000000'),float('2.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                806.78478209119226,
                -474.70590821362407
            ],
            "name": "reference",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "0",
                    "name": "xmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "5",
                    "name": "xmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "z",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": ".1",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('0.000000'),float('-0.100000'),float('-0.100000'),float('5.000000'),float('0.100000'),float('0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                823.9501846058622,
                -137.75583558768537
            ],
            "name": "to_rotate",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (X)')",
                "",
                "input('xmin', float)",
                "input('xmax', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder_x(xmin, xmax, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, y, z), (xmax, y, z)])",
                "sb.ui.wireframe([(xmin, y, z), (xmin, y, z + r)])",
                "",
                "sb.ui.wireframe([",
                "    (xmin, math.cos(i/36. * 2*math.pi) * r + y,",
                "     math.sin(i/36. * 2*math.pi) * r + z)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (xmax, math.cos(i/36. * 2*math.pi) * r + y,",
                "     math.sin(i/36. * 2*math.pi) * r + z)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(xmin, y, z)",
                "sb.ui.point(xmax, y, z)",
                "sb.ui.point(xmin, y, z + r, drag=(None, None, r))",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__27.__4,__20.__4,__22.__4,__14.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "2",
                    "name": "r",
                    "type": "int",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "g",
                    "type": "int",
                    "uid": 2
                },
                {
                    "expr": "255",
                    "name": "b",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('iii-r++q-Xf-0.911438q-Yf4.41144qZf0.1-r++q-Xf0.411438q-Yf3.08856qZf0.1-r++q-Xf-2q-Yf-2qZf0.1m-Xf-2-Yf2-Zf0m+*f0.911438X*f0.411438Y+*f-0.411438X*f0.911438Y_m-Xf2-Yf-2-Zf0m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.100000'),float('-2.100000'),float('-0.100000'),float('2.598334'),float('4.511438'),float('0.100000'),color=(2,0,255))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2137.875806525286,
                1089.5245349813217
            ],
            "name": "s4",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Set color (RGB)')",
                "",
                "input(\"shape\", fab.types.Shape)",
                "input(\"r\", int)",
                "input(\"g\", int)",
                "input(\"b\", int)",
                "",
                "output(\"out\", fab.shapes.set_color(shape, r, g, b))",
                ""
            ],
            "uid": 13
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__1.__0]",
                    "name": "a",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__18.__3]",
                    "name": "b",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012-2.0",
                    "name": "rez",
                    "type": "float",
                    "uid": 4
                }
            ],
            "inspector": [
                1793.7182815075782,
                -254.97264326743019
            ],
            "name": "s5",
            "script": [
                "import fab",
                "",
                "title('add')",
                "input('a', float)",
                "input('b', float)",
                "output('rez', a+b)"
            ],
            "uid": 16
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__1.__2]",
                    "name": "a",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__18.__4]",
                    "name": "b",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u00122.0",
                    "name": "rez",
                    "type": "float",
                    "uid": 4
                }
            ],
            "inspector": [
                1789.1770998648537,
                -20.392171229791245
            ],
            "name": "s6",
            "script": [
                "import fab",
                "",
                "title('add')",
                "input('a', float)",
                "input('b', float)",
                "output('rez', a+b)"
            ],
            "uid": 17
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__3.__0]",
                    "name": "dx",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__3.__1]",
                    "name": "dy",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "0",
                    "name": "dz",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0011[__1.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.000000'),float('1.900000'),float('-0.100000'),float('3.000000'),float('2.100000'),float('0.100000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                1441.4671491402928,
                -173.09607351289907
            ],
            "name": "further_out0",
            "script": [
                "import fab",
                "",
                "title('Translate')",
                "",
                "input('_x', float)",
                "input('_y', float)",
                "input('_z', float)",
                "input('dx', float)",
                "input('dy', float)",
                "input('dz', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', fab.shapes.translate(shape, dx, dy, dz))",
                "",
                "# UI",
                "sb.ui.wireframe([(_x, _y, _z),",
                "                  (_x + dx, _y + dy, _z + dz)], color=sb.color.teal)",
                "sb.ui.wireframe([(_x, _y - 0.3, _z),",
                "                  (_x, _y + 0.3, _z)], color=sb.color.teal)",
                "sb.ui.wireframe([(_x - 0.3, _y, _z),",
                "                  (_x + 0.3, _y, _z)], color=sb.color.teal)",
                "sb.ui.wireframe([(_x, _y, _z - 0.3),",
                "                  (_x, _y, _z + 0.3)], color=sb.color.teal)",
                "",
                "sb.ui.point(_x, _y, _z, color=sb.color.teal)",
                "sb.ui.point(_x + dx, _y + dy, _z + dz, color=sb.color.teal, drag=(dx, dy, dz))",
                ""
            ],
            "uid": 18
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__18.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.000000'),float('1.900000'),float('-0.100000'),float('3.000000'),float('2.100000'),float('0.100000'))",
                    "name": "copy",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                1469.0845964692728,
                61.377733507516837
            ],
            "name": "c2",
            "script": [
                "# Neil Gershenfeld 2/14/15",
                "# Matt Keeter 6/12/15",
                "",
                "import fab",
                "",
                "title('Copy')",
                "",
                "input('shape', fab.types.Shape)",
                "output('copy', shape)",
                "",
                ""
            ],
            "uid": 19
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__0.__0]",
                    "name": "circle_x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__0.__1]",
                    "name": "circle_y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0011[__0.__4]",
                    "name": "circle_r",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__16.__4]",
                    "name": "x",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__17.__4]",
                    "name": "y",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012-1.0",
                    "name": "hc_x",
                    "type": "float",
                    "uid": 15
                },
                {
                    "expr": "\u00123.0",
                    "name": "hc_y",
                    "type": "float",
                    "uid": 16
                },
                {
                    "expr": "\u00121.4142135623730951",
                    "name": "hc_r",
                    "type": "float",
                    "uid": 17
                },
                {
                    "expr": "\u00120.35355339059327373",
                    "name": "txz0",
                    "type": "float",
                    "uid": 13
                },
                {
                    "expr": "\u0012-3.064585653306515",
                    "name": "tyz0",
                    "type": "float",
                    "uid": 14
                },
                {
                    "expr": "\u0012-2.0",
                    "name": "px0",
                    "type": "float",
                    "uid": 10
                },
                {
                    "expr": "\u0012-2.0",
                    "name": "py0",
                    "type": "float",
                    "uid": 11
                },
                {
                    "expr": "\u00123.9269908169872414",
                    "name": "back_theta",
                    "type": "float",
                    "uid": 18
                },
                {
                    "expr": "\u00120.4114378277661475",
                    "name": "tx1",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u00123.0885621722338525",
                    "name": "ty1",
                    "type": "float",
                    "uid": 7
                },
                {
                    "expr": "\u0012-0.9114378277661477",
                    "name": "tx2",
                    "type": "float",
                    "uid": 8
                },
                {
                    "expr": "\u00124.4114378277661475",
                    "name": "ty2",
                    "type": "float",
                    "uid": 9
                },
                {
                    "expr": "\u0012-0.9114378277661477",
                    "name": "ty1_r",
                    "type": "float",
                    "uid": 21
                },
                {
                    "expr": "\u0012-2.4114378277661475",
                    "name": "zzz",
                    "type": "float",
                    "uid": 20
                },
                {
                    "expr": "\u00120.42403103949074056",
                    "name": "atan1",
                    "type": "float",
                    "uid": 19
                },
                {
                    "expr": "\u001224.295188945364576",
                    "name": "theta1",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u001265.70481105463544",
                    "name": "theta2",
                    "type": "float",
                    "uid": 12
                }
            ],
            "inspector": [
                2145.9721290654443,
                -483.67636297643594
            ],
            "name": "t1",
            "script": [
                "from math import sqrt,cos,sin,atan,degrees,tan,pi",
                "",
                "title('Tangent through Point')",
                "# given a circle, and a point",
                "# calculate the tangent_points, the angles",
                "",
                "input('circle_x',float)",
                "input('circle_y',float)",
                "input('circle_r',float)",
                "",
                "input('x',float)",
                "input('y',float)",
                "",
                "def angle(dx,dy):",
                "\tif dx==0:",
                "\t\treturn pi/2 if dy>0.0 else -pi/2",
                "\ttheta = atan(dy/dx)",
                "\tif theta > 0 and dx < 0:",
                "\t\ttheta  = theta + pi",
                "\telif theta < 0 and dx < 0:",
                "\t\ttheta = theta + pi",
                "\telif theta == 0.0 and dx<0:",
                "\t\ttheta = theta + pi",
                "\treturn theta",
                "",
                "",
                "# because a circle half-way between intersects at the tangents",
                "half_circle_x = (circle_x + x)/2.0",
                "half_circle_y = (circle_y + y)/2.0",
                "half_circle_r = sqrt( ((circle_x-half_circle_x)**2) + ((circle_y-half_circle_y)**2) )",
                "output('hc_x',half_circle_x)",
                "output('hc_y',half_circle_y)",
                "output('hc_r',half_circle_r)",
                "",
                "# for circle at (0,0), and point at (2*half_circle_r,0)",
                "tx = circle_r**2 / (2.0 * half_circle_r)",
                "ty = sqrt( circle_r**2 - tx**2) ",
                "output('txz0',tx-circle_x)",
                "output('tyz0',ty-circle_y)",
                "# figure the rotation to get back to our original layout",
                "# translate the pt the same as the circle was translated to 0,0",
                "px0 = x - circle_x",
                "py0 = y - circle_y",
                "output('px0',px0)",
                "output('py0',py0)",
                "back_theta = angle( px0, py0 )",
                "output('back_theta',back_theta)",
                "# rotate the points",
                "tx1_r = tx * cos(back_theta) - ty * sin(back_theta)",
                "ty1_r = tx * sin(back_theta) + ty * cos(back_theta)",
                "tx2_r = tx * cos(back_theta) + ty * sin(back_theta)",
                "ty2_r = tx * sin(back_theta) - ty * cos(back_theta)",
                "",
                "# translate them back to our original layout",
                "output('tx1', tx1_r + circle_x)",
                "output('ty1', ty1_r + circle_y)",
                "output('tx2', tx2_r + circle_x)",
                "output('ty2', ty2_r + circle_y)",
                "",
                "",
                "output('ty1_r',ty1_r)",
                "output('zzz',px0-tx1_r)",
                "output('atan1', atan( (py0-ty1_r)/(px0-tx1_r) ))",
                "output('theta1',degrees(  angle(tx1_r-px0, ty1_r-py0)) )",
                "output('theta2',degrees(angle( tx2_r-px0, ty2_r-py0)))",
                "",
                "",
                "",
                "",
                "",
                "",
                ""
            ],
            "uid": 15
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__16.__4]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__17.__4]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__15.__5]",
                    "name": "a",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__18.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-2-Yf2-Zf0m+*f0.911438X*f0.411438Y+*f-0.411438X*f0.911438Y_m-Xf2-Yf-2-Zf0m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.041144'),float('1.908856'),float('-0.100000'),float('2.598334'),float('4.148334'),float('0.100000'))",
                    "name": "rotated",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2322.0792804367538,
                690.5670454888018
            ],
            "name": "r2",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Rotate (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('_z', float)",
                "input('a', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('rotated', fab.shapes.rotate_z(shape, a, x, y))",
                "",
                "# UI",
                "rad = math.radians(a)",
                "sb.ui.wireframe([(x + math.cos(rad), y + math.sin(rad), _z),",
                "                  (x, y, _z),",
                "                  (x + 1, y, _z)], color=sb.color.teal)",
                "",
                "# Draw a semi-circular arc showing the rotation",
                "if int(a) % 360 != 0:",
                "    sb.ui.wireframe([",
                "        (x + math.cos(math.radians(a_)) * 0.3,",
                "         y + math.sin(math.radians(a_)) * 0.3, _z)",
                "        for a_ in range(int(a) % 360)], color=sb.color.teal)",
                "",
                "sb.ui.point(x, y, _z, color=sb.color.teal)",
                "",
                "def drag_pt(this, x, y, z):",
                "    this.a = math.degrees(math.atan2(y - this.y, x - this.x))",
                "sb.ui.point(x + math.cos(rad), y + math.sin(rad), _z,",
                "             color=sb.color.teal, drag=drag_pt, relative=False)",
                "",
                ""
            ],
            "uid": 14
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__1.__3]",
                    "name": "a",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__18.__5]",
                    "name": "b",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u00120.0",
                    "name": "rez",
                    "type": "float",
                    "uid": 4
                }
            ],
            "inspector": [
                1802.4084735632375,
                222.26673505380592
            ],
            "name": "s7",
            "script": [
                "import fab",
                "",
                "title('add')",
                "input('a', float)",
                "input('b', float)",
                "output('rez', a+b)"
            ],
            "uid": 21
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__15.__10]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__15.__11]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0011[__21.__4]",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": ".1",
                    "name": "r",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('-r++q-Xf-2q-Yf-2qZf0.1',float('-2.100000'),float('-2.100000'),float('-0.100000'),float('-1.900000'),float('-1.900000'),float('0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3047.1853975754452,
                121.17651368937345
            ],
            "name": "s8",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Sphere (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.sphere(x, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z-r), (x,y,z+r)])",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y, z + r, drag=(None, None, r))",
                "sb.ui.point(x, y, z - r, drag=(None, None, r))",
                ""
            ],
            "uid": 22
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__15.__6]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__15.__7]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0011[__21.__4]",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": ".1",
                    "name": "r",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('-r++q-Xf0.411438q-Yf3.08856qZf0.1',float('0.311438'),float('2.988562'),float('-0.100000'),float('0.511438'),float('3.188562'),float('0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2962.1774472657935,
                -566.33954409418789
            ],
            "name": "s9",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Sphere (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.sphere(x, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z-r), (x,y,z+r)])",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y, z + r, drag=(None, None, r))",
                "sb.ui.point(x, y, z - r, drag=(None, None, r))",
                ""
            ],
            "uid": 20
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__15.__13]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__15.__14]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": ".1",
                    "name": "r",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('-r++q-Xf0.353553q-Yf-3.06459qZf0.1',float('0.253553'),float('-3.164586'),float('-0.100000'),float('0.453553'),float('-2.964586'),float('0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2577.6322822703755,
                -555.1845183122266
            ],
            "name": "s10",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Sphere (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.sphere(x, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z-r), (x,y,z+r)])",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y, z + r, drag=(None, None, r))",
                "sb.ui.point(x, y, z - r, drag=(None, None, r))",
                ""
            ],
            "uid": 23
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__15.__15]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__15.__16]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "-.2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "-.1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__15.__17]",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf-1q-Yf3f1.41421a-f-0.2Z-Zf-0.1',float('-2.414214'),float('1.585786'),float('-0.200000'),float('0.414214'),float('4.414214'),float('-0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                2808.063743895083,
                473.39624681315269
            ],
            "name": "halfcircle",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 24
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__24.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "255",
                    "name": "r",
                    "type": "int",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "g",
                    "type": "int",
                    "uid": 2
                },
                {
                    "expr": "0",
                    "name": "b",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf-1q-Yf3f1.41421a-f-0.2Z-Zf-0.1',float('-2.414214'),float('1.585786'),float('-0.200000'),float('0.414214'),float('4.414214'),float('-0.100000'),color=(255,0,0))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2832.2990466329575,
                846.61990897642318
            ],
            "name": "s11",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Set color (RGB)')",
                "",
                "input(\"shape\", fab.types.Shape)",
                "input(\"r\", int)",
                "input(\"g\", int)",
                "input(\"b\", int)",
                "",
                "output(\"out\", fab.shapes.set_color(shape, r, g, b))",
                ""
            ],
            "uid": 25
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__15.__8]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__15.__9]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0011[__21.__4]",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": ".1",
                    "name": "r",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('-r++q-Xf-0.911438q-Yf4.41144qZf0.1',float('-1.011438'),float('4.311438'),float('-0.100000'),float('-0.811438'),float('4.511438'),float('0.100000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                3130.1971846939191,
                -404.92564133740336
            ],
            "name": "s12",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Sphere (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.sphere(x, y, z, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z-r), (x,y,z+r)])",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x, y, z + r, drag=(None, None, r))",
                "sb.ui.point(x, y, z - r, drag=(None, None, r))",
                ""
            ],
            "uid": 27
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__16.__4]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__17.__4]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "_z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "\u0011[__15.__12]",
                    "name": "a",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "\u0011[__18.__7]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-2-Yf2-Zf0m+*f0.411438X*f0.911438Y+*f-0.911438X*f0.411438Y_m-Xf2-Yf-2-Zf0m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.091144'),float('1.958856'),float('-0.100000'),float('0.148334'),float('6.598334'),float('0.100000'))",
                    "name": "rotated",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                1958.7300212994573,
                681.5591755781702
            ],
            "name": "r3",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Rotate (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('_z', float)",
                "input('a', float)",
                "",
                "input('shape', fab.types.Shape)",
                "output('rotated', fab.shapes.rotate_z(shape, a, x, y))",
                "",
                "# UI",
                "rad = math.radians(a)",
                "sb.ui.wireframe([(x + math.cos(rad), y + math.sin(rad), _z),",
                "                  (x, y, _z),",
                "                  (x + 1, y, _z)], color=sb.color.teal)",
                "",
                "# Draw a semi-circular arc showing the rotation",
                "if int(a) % 360 != 0:",
                "    sb.ui.wireframe([",
                "        (x + math.cos(math.radians(a_)) * 0.3,",
                "         y + math.sin(math.radians(a_)) * 0.3, _z)",
                "        for a_ in range(int(a) % 360)], color=sb.color.teal)",
                "",
                "sb.ui.point(x, y, _z, color=sb.color.teal)",
                "",
                "def drag_pt(this, x, y, z):",
                "    this.a = math.degrees(math.atan2(y - this.y, x - this.x))",
                "sb.ui.point(x + math.cos(rad), y + math.sin(rad), _z,",
                "             color=sb.color.teal, drag=drag_pt, relative=False)",
                "",
                ""
            ],
            "uid": 28
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__28.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "200",
                    "name": "r",
                    "type": "int",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "g",
                    "type": "int",
                    "uid": 2
                },
                {
                    "expr": "255",
                    "name": "b",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('m-Xf-2-Yf2-Zf0m+*f0.411438X*f0.911438Y+*f-0.911438X*f0.411438Y_m-Xf2-Yf-2-Zf0m-Xf-2-Yf2-Zf0a-r+q-Yf0q-Zf0f0.1a-f0X-Xf5',float('-2.091144'),float('1.958856'),float('-0.100000'),float('0.148334'),float('6.598334'),float('0.100000'),color=(200,0,255))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                2508.3054850425265,
                1083.8357034134374
            ],
            "name": "s0",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Set color (RGB)')",
                "",
                "input(\"shape\", fab.types.Shape)",
                "input(\"r\", int)",
                "input(\"g\", int)",
                "input(\"b\", int)",
                "",
                "output(\"out\", fab.shapes.set_color(shape, r, g, b))",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "'dx,dy'",
                    "name": "fields",
                    "type": "str",
                    "uid": 7
                },
                {
                    "expr": "[[-2.0,-2.0],[2.0,2.0],[2.0,-2.0],[-2.0,2.0]]",
                    "name": "sets",
                    "type": "list",
                    "uid": 8
                },
                {
                    "expr": "3",
                    "name": "which",
                    "type": "int",
                    "uid": 9
                },
                {
                    "expr": "\u0012-2.0",
                    "name": "dx",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u00122.0",
                    "name": "dy",
                    "type": "float",
                    "uid": 1
                }
            ],
            "inspector": [
                923.01736245410711,
                170.28144578698573
            ],
            "name": "s1",
            "script": [
                "import fab",
                "",
                "title('scenario')",
                "input('fields', str)",
                "input('sets',list)",
                "input('which',int)",
                "",
                "field_list = fields.split(',')",
                "",
                "for i,f in enumerate(field_list):",
                "\toutput(f,sets[which][i]+0.0)",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "'dx,dy'",
                    "name": "fields",
                    "type": "str",
                    "uid": 7
                },
                {
                    "expr": "[[0.0,0.0],[0.0,1.1],[0.0,2.0],[0.0,1.9],[0.0,2.1],[0.0,4.0],[-2.0,4.0],[-4.0,4.0],[-4.0,2.0],[-4.0,0.0],[-2.0,0.0],]",
                    "name": "sets",
                    "type": "list",
                    "uid": 8
                },
                {
                    "expr": "5",
                    "name": "which",
                    "type": "int",
                    "uid": 9
                },
                {
                    "expr": "[6,10]",
                    "name": "ofinterest",
                    "type": "list",
                    "uid": 2
                },
                {
                    "expr": "'0,2 seems a special case, yet 0,-2 works,  and -2,4 fails, and -2,0 fails'",
                    "name": "notes",
                    "type": "str",
                    "uid": 3
                },
                {
                    "expr": "\u00120.0",
                    "name": "dx",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u00124.0",
                    "name": "dy",
                    "type": "float",
                    "uid": 1
                }
            ],
            "inspector": [
                429.55645121040425,
                -667.48365207777147
            ],
            "name": "ref_position",
            "script": [
                "import fab",
                "",
                "title('scenario')",
                "input('fields', str)",
                "input('sets',list)",
                "input('which',int)",
                "input('ofinterest',list)",
                "input('notes',str)",
                "",
                "field_list = fields.split(',')",
                "",
                "for i,f in enumerate(field_list):",
                "\toutput(f,sets[which][i]+0.0)",
                ""
            ],
            "uid": 4
        }
    ],
    "protocol": 6,
    "type": "sb"
}
